from collections import deque
from typing import List

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        dq = deque()
        result = []

        for i, val in enumerate(nums):
            # Remove elements from deque from right that is less than new one
            while dq and nums[dq[-1]] < val:
                dq.pop()

            # Remove indicies that is outside the window
            if dq and dq[0] < i - k + 1:
                dq.popleft()
            
            dq.append(i)
            
            if i + 1 >= k:
                result.append(nums[dq[0]])
    
        return result

# Tests with assertions
if __name__ == "__main__":
    sol = Solution()
    assert sol.maxSlidingWindow([1, 3, -1, -3, 5, 3, 6, 7], 3) == [3, 3, 5, 5, 6, 7]
    assert sol.maxSlidingWindow([1], 1) == [1]
    assert sol.maxSlidingWindow([1, -1], 1) == [1, -1]
    assert sol.maxSlidingWindow([9, 11], 2) == [11]
    print("All tests passed!")